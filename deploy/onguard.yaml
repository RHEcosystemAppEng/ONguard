apiVersion: apps/v1
kind: Deployment
metadata:
  name: onguard
  labels:
    app: onguard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: onguard
  template:
    metadata:
      labels:
        app: onguard
    spec:
      containers:
      - name: onguard
        image: onguard:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: management
          containerPort: 9000
          protocol: TCP
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        env:
          - name: DB_REDIS_HOST
            valueFrom:
              secretKeyRef:
                name: exhort-onguard-secret
                key: db.host
          - name: DB_REDIS_PORT
            valueFrom:
              secretKeyRef:
                name: exhort-onguard-secret
                key: db.port
          - name: API_NVD_APIKEY
            valueFrom:
              secretKeyRef:
                name: exhort-onguard-secret
                key: api-nvd-apikey
        livenessProbe:
          httpGet:
            path: /q/health/live
            port: 9000
          initialDelaySeconds: 1
        readinessProbe:
          httpGet:
            path: /q/health/ready
            port: 9000
          initialDelaySeconds: 5
          periodSeconds: 20
---
apiVersion: v1
kind: Service
metadata:
  name: onguard
  labels:
    app: onguard
spec:
  ports:
  - name: http
    port: 8080
    protocol: TCP
    targetPort: 8080
  - name: management
    port: 9000
    protocol: TCP
    targetPort: 9000
  selector:
    app: onguard
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sync-nvd-script
data:
  sync.sh: |
    #!/bin/bash

    set -euo pipefail

    status_code=$(curl --write-out '%{http_code}' --silent --output /dev/null http://onguard:9000/load)

    if [ ${status_code} == '404' ]; then
        echo Load data is empty
        curl -XPOST http://onguard:9000/load
    elif [ ${status_code} == '200' ]; then
        load=$(curl -s http://onguard:9000/load)
        echo ${load}
        if [[ $load == *"completed"* ]]; then
            completed=$(echo "$load" | sed -E 's/.*"completed":"?([^,"]*)"?.*/\1/')
            echo "Completed load on ${completed}. Sync with most recent data"
            curl -XPOST http://onguard:9000/load?since=${completed}
        else
            echo "Load not yet completed"
        fi
    else
        echo "Unexpected status code ${status_code}. Skip load and sync."
    fi
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: sync-nvd-db
spec:
  schedule: "0 */2 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: sync
              image: registry.access.redhat.com/ubi9/ubi-minimal:9.3
              imagePullPolicy: IfNotPresent
              command:
                - /bin/sh
                - /scripts/sync.sh
              volumeMounts:
                - name: script-cm
                  mountPath: /scripts
          volumes:
            - name: script-cm
              configMap:
                name: sync-nvd-script
                defaultMode: 0777
          restartPolicy: OnFailure
              
