/*
 * Copyright 2024 Red Hat, Inc. and/or its affiliates
 * and other contributors as indicated by the @author tags.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.redhat.ecosystemappeng.exhort.cve.service;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;

import org.eclipse.microprofile.rest.client.inject.RestClient;
import org.jboss.resteasy.reactive.ClientWebApplicationException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.redhat.ecosystemappeng.exhort.cve.model.Vulnerability;
import com.redhat.ecosystemappeng.exhort.cve.model.osv.OsvVulnerability;
import com.redhat.ecosystemappeng.exhort.cve.model.osv.PackageRef;
import com.redhat.ecosystemappeng.exhort.cve.model.osv.QueryRequest;
import com.redhat.ecosystemappeng.exhort.cve.model.osv.QueryRequestItem;
import com.redhat.ecosystemappeng.exhort.cve.model.osv.VulnerabilityRef;
import com.redhat.ecosystemappeng.exhort.cve.service.nvd.NvdService;
import com.redhat.ecosystemappeng.exhort.cve.service.osv.OsvApi;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.ws.rs.core.Response;

@ApplicationScoped
public class VulnerabilityServiceImpl implements VulnerabilityService {

  private static final Logger LOGGER = LoggerFactory.getLogger(VulnerabilityServiceImpl.class);

  @Inject
  VulnerabilityRepository repository;

  @RestClient
  OsvApi osvApi;

  @Inject
  NvdService nvdService;

  @Inject
  ExecutorService executorService;

  @Override
  public Vulnerability get(String aliasId, boolean reload) {
    var vuln = repository.getByAlias(aliasId);
    return load(vuln, reload);
  }

  @Override
  public List<Vulnerability> find(List<String> aliases, boolean reload) {
    return repository.listByAliases(aliases)
        .stream()
        .parallel()
        .map(vuln -> load(vuln, reload))
        .toList();
  }

  @Override
  public Map<String, List<Vulnerability>> findByPurls(List<String> purls) {
    List<QueryRequestItem> queries = purls.stream().map(purl -> new QueryRequestItem(new PackageRef(purl))).toList();
    var response = osvApi.queryBatch(new QueryRequest(queries));
    Map<String, List<Vulnerability>> vulnerabilities = new HashMap<>();
    for (int i = 0; i < purls.size(); i++) {
      var purl = purls.get(i);
      var resultItem = response.results().get(i);
      if (resultItem == null || resultItem.vulns() == null) {
        vulnerabilities.put(purl, Collections.emptyList());
      } else {
        vulnerabilities.put(purl, find(resultItem.vulns().stream().map(VulnerabilityRef::id).toList(), false));
      }
    }
    return vulnerabilities;
  }

  private Vulnerability load(Vulnerability vuln, boolean reload) {
    if (!reload && vuln.hasData()) {
      return vuln;
    }
    return load(vuln);
  }

  private Vulnerability load(Vulnerability vuln) {
    var builder = new Vulnerability.Builder().aliases(vuln.aliases()).cveId(vuln.cveId());
    if (vuln.created() == null) {
      builder.created(new Date());
    } else {
      builder.created(vuln.created()).lastModified(new Date());
    }
    if (vuln.aliases() != null && !vuln.aliases().isEmpty()) {
      addOsvVulnerabilityData(vuln.aliases(), builder);
      var metrics = nvdService.getCveMetrics(builder.getCveId());
      if(metrics != null) {
        builder.metrics(metrics);
      }

      var existing = repository.get(builder.getCveId());
      // missing match between cve and vulnId
      if (existing.hasData()) {
        builder.metrics(existing.metrics()).created(existing.created()).lastModified(new Date());
        var updated = builder.build();
        repository.save(updated);
        return updated;
      }

    }
    var newVuln = builder.build();
    repository.save(newVuln);
    return newVuln;
  }

  private void addOsvVulnerabilityData(List<String> aliases, Vulnerability.Builder builder) {
    OsvVulnerability osvVuln = null;
    String alias = aliases.get(0);
    try {
      osvVuln = osvApi.getVuln(alias);
    } catch (ClientWebApplicationException e) {
      if (e.getResponse() != null && e.getResponse().getStatus() == Response.Status.NOT_FOUND.getStatusCode()) {
        LOGGER.info("Not found vulnerability: {} in OSV", alias);
      } else {
        LOGGER.error("Error retrieving OSV vulnerability for {}", alias, e);
      }
    }
    if (osvVuln == null) {
      LOGGER.warn("No OSV data found for cve: {}", alias);
      return;
    }
    Set<String> updatedAliases = new HashSet<>(osvVuln.aliases());
    builder.summary(osvVuln.summary()).description(osvVuln.details()).affected(osvVuln.affected());
    updatedAliases.addAll(aliases);
    builder.cveId(osvVuln.id()).aliases(List.of(updatedAliases.toArray(new String[0])));
  }

}
