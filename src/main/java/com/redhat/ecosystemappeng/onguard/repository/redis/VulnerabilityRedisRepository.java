/*
 * Copyright 2024 Red Hat, Inc. and/or its affiliates
 * and other contributors as indicated by the @author tags.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.redhat.ecosystemappeng.onguard.repository.redis;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.redhat.ecosystemappeng.onguard.model.Alias;
import com.redhat.ecosystemappeng.onguard.model.Vulnerability;
import com.redhat.ecosystemappeng.onguard.model.VulnerabilityAlias;
import com.redhat.ecosystemappeng.onguard.repository.VulnerabilityRepository;

import io.quarkus.redis.datasource.RedisDataSource;
import io.quarkus.redis.datasource.json.JsonCommands;
import io.quarkus.redis.datasource.value.ValueCommands;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;

@ApplicationScoped
public class VulnerabilityRedisRepository implements VulnerabilityRepository {

    private static final Logger LOGGER = LoggerFactory.getLogger(VulnerabilityRedisRepository.class);

    @Inject
    ObjectMapper mapper;

    private final ValueCommands<String, Alias> aliasCommands;
    private final JsonCommands<String> jsonCommands;

    public VulnerabilityRedisRepository(RedisDataSource ds) {
        this.jsonCommands = ds.json(String.class);
        this.aliasCommands = ds.value(Alias.class);
    }

    @Override
    public Vulnerability get(String cveId) {
        if (cveId == null) {
            return null;
        }
        var vuln = jsonCommands.jsonGet(cveId, Vulnerability.class);
        if (vuln == null) {
            return Vulnerability.builder().cveId(cveId).build();
        }
        return vuln;
    }

    @Override
    public void save(Vulnerability vulnerability) {
        jsonCommands.jsonSet(vulnerability.cveId(), vulnerability);
        var alias = new Alias(vulnerability.cveId(), vulnerability.cveId());
        aliasCommands.set(Alias.getKey(alias.id()), alias);
    }

    public void setAliases(List<String> aliases, String cveId) {
        aliasCommands.mset(aliases.stream().collect(Collectors.toMap(v -> Alias.getKey(v), v -> new Alias(v, cveId))));
    }

    //TODO: Can work with mget?
    @Override
    public List<Vulnerability> list(List<String> cves) {
        // Arguments do not match the signature...
        if (cves == null || cves.isEmpty()) {
            return Collections.emptyList();
        }
        var first = cves.get(0);
        var varargs = new ArrayList<>(cves.subList(1, cves.size()));
        varargs.add("$");
        var found = jsonCommands.jsonMget(first, varargs.toArray(new String[0]));
        var results = new ArrayList<Vulnerability>();
        for (int i = 0; i < cves.size(); i++) {
            Vulnerability vuln = null;
            if (found.get(i) != null) {
                try {
                    vuln = mapper.readValue(found.get(i).getJsonObject(0).encode(), Vulnerability.class);
                } catch (JsonProcessingException e) {
                    LOGGER.warn("Unable to parse vulnerability with id {}", cves.get(i), e);
                }
            }
            if (vuln == null) {
                vuln = Vulnerability.builder().cveId(cves.get(i)).build();
            }
            results.add(vuln);
        }
        return results;
    }

    @Override
    public VulnerabilityAlias getByAlias(String aliasId) {
        var alias = aliasCommands.get(Alias.getKey(aliasId));
        if(alias == null) {
            return new VulnerabilityAlias(aliasId, null);
        }
        return new VulnerabilityAlias(aliasId, get(alias.cveId()));
    }

    @Override
    public List<VulnerabilityAlias> listByAliases(List<String> aliasIds) {
        return aliasIds.stream().parallel().map(this::getByAlias).toList();
    }

}
