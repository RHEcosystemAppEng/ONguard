/*
 * Copyright 2024 Red Hat, Inc. and/or its affiliates
 * and other contributors as indicated by the @author tags.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.redhat.ecosystemappeng.onguard.repository.redis;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.redhat.ecosystemappeng.onguard.model.osv.OpenSourceVulnerability;
import com.redhat.ecosystemappeng.onguard.model.osv.OsvVulnerabilityBuilder;
import com.redhat.ecosystemappeng.onguard.repository.VulnerabilityRepository;

import io.quarkus.redis.datasource.ReactiveRedisDataSource;
import io.quarkus.redis.datasource.value.ReactiveValueCommands;
import io.smallrye.mutiny.Uni;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;

@ApplicationScoped
public class VulnerabilityRedisRepository implements VulnerabilityRepository {

  private static final String KEY_PREFIX = "vuln:";

  @Inject
  ObjectMapper mapper;

  private final ReactiveValueCommands<String, OpenSourceVulnerability> vulnCommands;

  public VulnerabilityRedisRepository(ReactiveRedisDataSource ds) {
    this.vulnCommands = ds.value(OpenSourceVulnerability.class);
  }

  @Override
  public Uni<OpenSourceVulnerability> get(String vulnId) {
    if (vulnId == null) {
      return Uni.createFrom().nullItem();
    }

    return vulnCommands.get(toKey(vulnId))
      .onItem().ifNull()
      .continueWith(new OpenSourceVulnerability().withId(vulnId))
      .onItem().transform(OsvVulnerabilityBuilder::build);
  }

  private String toKey(String vulnId) {
    return KEY_PREFIX + vulnId;
  }

  private String fromKey(String key) {
    return key.substring(KEY_PREFIX.length());
  }

  public Uni<Map<String,OpenSourceVulnerability>> list(List<String> vulns) {
    if (vulns == null || vulns.isEmpty()) {
      return Uni.createFrom().item(Collections.emptyMap());
    }
    String[] keys = vulns.stream().map(this::toKey).toArray(String[]::new);
    return vulnCommands.mget(keys)
        .onItem()
        .transform(m -> {
          Map<String, OpenSourceVulnerability> result = new HashMap<>();
          for(var e : m.entrySet()) {
            var vulnId = fromKey(e.getKey());
            var vuln = OsvVulnerabilityBuilder.build(e.getValue());
            if(vuln == null) {
              result.put(vulnId, OsvVulnerabilityBuilder.build(vulnId));
            } else {
              var key = vuln.getId() == null ? vulnId : vuln.getId();
              if(!result.containsKey(key)) {
                result.put(key, vuln);
              }
            }
          }

          return result;
        });
  }

}
