/*
 * Copyright 2024 Red Hat, Inc. and/or its affiliates
 * and other contributors as indicated by the @author tags.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.redhat.ecosystemappeng.onguard.rest;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.jboss.resteasy.reactive.RestResponse;
import org.jboss.resteasy.reactive.RestResponse.ResponseBuilder;

import com.redhat.ecosystemappeng.onguard.model.Vulnerability;
import com.redhat.ecosystemappeng.onguard.service.VulnerabilityService;

import io.smallrye.mutiny.Uni;
import io.smallrye.mutiny.infrastructure.Infrastructure;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.QueryParam;

@Path("/vulnerabilities")
public class VulnerabilityEndpoint {

    @Inject
    VulnerabilityService svc;

    @POST
    public RestResponse<Set<Vulnerability>> find(List<String> vulnerabilities, @QueryParam("reload") boolean reload, @QueryParam("omitBody") boolean omitBody) {
        if(omitBody) {
            Uni.createFrom().item(vulnerabilities).onItem().invoke(v -> svc.find(v, reload))
                .runSubscriptionOn(Infrastructure.getDefaultWorkerPool()).subscribeAsCompletionStage();
            return ResponseBuilder.accepted(Set.copyOf(new HashSet<Vulnerability>())).build();
        }
        return ResponseBuilder.ok(svc.find(vulnerabilities, reload)).build();
    }

    @GET
    @Path("/{alias}")
    public Vulnerability get(@PathParam("alias") String alias, @QueryParam("reload") boolean reload) {
        return svc.get(alias, reload);
    }


}
