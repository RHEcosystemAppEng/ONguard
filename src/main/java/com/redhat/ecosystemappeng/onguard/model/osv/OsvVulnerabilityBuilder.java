/*
 * Copyright 2024 Red Hat, Inc. and/or its affiliates
 * and other contributors as indicated by the @author tags.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.redhat.ecosystemappeng.onguard.model.osv;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;

public class OsvVulnerabilityBuilder {

  public static final Pattern CVE_PATTERN = Pattern.compile("CVE-\\d{4}-\\d{4,7}", Pattern.CASE_INSENSITIVE);

  public static OpenSourceVulnerability build(String vulnId) {
    if (CVE_PATTERN.matcher(vulnId).matches()) {
      return new OpenSourceVulnerability().withId(vulnId);
    }
    return new OpenSourceVulnerability().withAliases(List.of(vulnId));
  }

  public static OpenSourceVulnerability build(OpenSourceVulnerability osv) {
    if (osv == null) {
      return null;
    }
    OpenSourceVulnerability copy = new OpenSourceVulnerability(osv);
    copy.withAliases(new ArrayList<>());
    if (!CVE_PATTERN.matcher(copy.getId()).matches()) {
      copy.getAliases().add(copy.getId());
      copy.setId(null);
    }
    for (String alias : osv.getAliases()) {
      if (CVE_PATTERN.matcher(alias).matches()) {
        copy.setId(alias);
      } else {
        copy.getAliases().add(alias);
      }
    }
    return copy;
  }

}
