/*
 * Copyright 2024 Red Hat, Inc. and/or its affiliates
 * and other contributors as indicated by the @author tags.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.redhat.ecosystemappeng.onguard.model;

import static com.redhat.ecosystemappeng.onguard.model.osv.OsvVulnerability.CVE_PATTERN;

import java.util.Date;
import java.util.List;

import com.redhat.ecosystemappeng.onguard.model.nvd.Metrics;
import com.redhat.ecosystemappeng.onguard.model.osv.Affected;

public record Vulnerability(
        String cveId,
        Date created,
        Date lastModified,
        String summary,
        String description,
        List<Affected> affected,
        Metrics metrics) {

    public boolean hasData() {
        return created != null && metrics != null;
    }

    @Override
    public final int hashCode() {
        return cveId.hashCode();
    }

    @Override
    public final boolean equals(Object other) {
        if(other == null) {
            return false;
        }
        if(other instanceof Vulnerability) {
            return cveId.equals(((Vulnerability)other).cveId);
        }
       return false;
    }

    public static class Builder {
        List<String> aliases;
        String cveId;
        Date created;
        Date lastModified;
        String summary;
        String description;
        List<Affected> affected;
        Metrics metrics;

        private Builder() {
        }

        private Builder(Vulnerability other) {
            this.cveId = other.cveId;
            this.created = other.created;
            this.lastModified = other.lastModified;
            this.summary = other.summary;
            this.description = other.description;
            this.affected = other.affected;
            this.metrics = other.metrics;
        }

        public Builder cveId(String cveId) {
            this.cveId = cveId;
            return this;
        }

        public Builder created(Date created) {
            this.created = created;
            return this;
        }

        public Builder lastModified(Date lastModified) {
            this.lastModified = lastModified;
            return this;
        }

        public Builder summary(String summary) {
            this.summary = summary;
            return this;
        }

        public Builder description(String description) {
            this.description = description;
            return this;
        }

        public Builder affected(List<Affected> affected) {
            this.affected = affected;
            return this;
        }

        public Builder metrics(Metrics metrics) {
            this.metrics = metrics;
            return this;
        }

        public String getCveId() {
            return cveId;
        }
        
        public Vulnerability build() {
            if(cveId == null && aliases != null) {
                var alias = aliases.stream().filter(a -> CVE_PATTERN.matcher(a).matches()).findAny();
                if(alias.isPresent()) {
                    cveId = alias.get();
                }
            }
            return new Vulnerability(cveId, created, lastModified, summary, description, affected, metrics);
        }
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(Vulnerability other) {
        return new Builder(other);
    }
}
