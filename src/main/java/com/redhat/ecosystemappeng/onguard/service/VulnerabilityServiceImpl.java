/*
 * Copyright 2024 Red Hat, Inc. and/or its affiliates
 * and other contributors as indicated by the @author tags.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.redhat.ecosystemappeng.onguard.service;

import java.time.Duration;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.stream.Collectors;

import org.eclipse.microprofile.config.inject.ConfigProperty;
import org.eclipse.microprofile.context.ManagedExecutor;
import org.eclipse.microprofile.faulttolerance.Fallback;
import org.jboss.logging.Logger;
import org.jboss.resteasy.reactive.ClientWebApplicationException;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.redhat.ecosystemappeng.onguard.model.Vulnerability;
import com.redhat.ecosystemappeng.onguard.model.VulnerabilityAlias;
import com.redhat.ecosystemappeng.onguard.model.osv.Partition;
import com.redhat.ecosystemappeng.onguard.repository.VulnerabilityRepository;
import com.redhat.ecosystemappeng.onguard.service.nvd.NvdService;
import com.redhat.ecosystemappeng.onguard.service.osv.OsvService;

import io.smallrye.mutiny.Multi;
import io.smallrye.mutiny.Uni;
import io.smallrye.mutiny.tuples.Tuple2;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.ws.rs.core.Response;

@ApplicationScoped
public class VulnerabilityServiceImpl implements VulnerabilityService {

  private static final Logger LOGGER = Logger.getLogger(VulnerabilityServiceImpl.class);
  private static final int MAX_OSV_BATCH = 1000;

  @Inject
  VulnerabilityRepository repository;

  @Inject
  OsvService osvService;

  @Inject
  NvdService nvdService;

  @Inject
  ExecutorService executorService;

  @Inject
  ObjectMapper mapper;

  @ConfigProperty(name = "CircuitBreaker/delay", defaultValue = "30")
  Long delay;

  @Inject
  ManagedExecutor executor;

  @Override
  public Multi<Vulnerability> find(List<String> aliases, boolean reload) {
    if (aliases.isEmpty()) {
      return Multi.createFrom().empty();
    }
    return repository.listByAliases(aliases)
        .onItem().ifNotNull().transformToMulti(list -> Multi.createFrom().iterable(list))
        .onItem().transformToUniAndMerge(v -> load(v, reload));
  }

  @Override
  public Uni<Map<String, List<Vulnerability>>> findByPurls(List<String> purls, boolean reload) {
    return Multi.createFrom().items(new Partition(purls, MAX_OSV_BATCH).stream())
        .onItem().transform(p -> processBatch(p, reload)).onItem()
        .transformToUniAndMerge(e -> e)
        .toUni()
        .onItem().ifNull().continueWith(Collections.emptyMap());
  }

  Uni<Map<String, List<Vulnerability>>> processBatchFallback(List<String> purls, boolean reload) {
    Uni.createFrom()
        .voidItem()
        .onItem()
        .delayIt().by(Duration.ofSeconds(delay))
        .chain(() -> processBatch(purls, reload))
        .runSubscriptionOn(executor).subscribeAsCompletionStage();
    return Uni.createFrom().item(purls).onItem()
        .transform(i -> i.stream().collect(Collectors.toMap(purl -> purl, purl -> Collections.emptyList())));
  }

  @Fallback(fallbackMethod = "processBatchFallback")
  Uni<Map<String, List<Vulnerability>>> processBatch(List<String> purls, boolean reload) {
    var keys = Multi.createFrom().items(purls.stream());

    var values = osvService.query(purls)
        .onItem()
        .transform(vulns -> find(vulns, reload));

    return Multi.createBy().combining().streams(keys, values).asTuple().onItem()
        .transformToUniAndMerge(t -> t.getItem2().collect().asList().map(items -> Tuple2.of(t.getItem1(), items)))
        .collect().asMap(t -> t.getItem1(), t -> t.getItem2());
  }

  private Uni<Vulnerability> load(VulnerabilityAlias vulnAlias, boolean reload) {
    if (!reload && vulnAlias.vulnerability() != null) {
      return Uni.createFrom().item(vulnAlias.vulnerability());
    }
    return osvService.get(vulnAlias.alias())
        .onItem().ifNotNull()
        .transformToUni(v -> {
          if(vulnAlias.alias().equals(v.cveId()) || v.severities() != null) {
            return Uni.createFrom().item(v);
          }
          if(v.cveId() == null) {
            return Uni.createFrom().nullItem();
          }
          return osvService.get(v.cveId());
        })
        .onItem().ifNotNull()
        .transformToUni(updated -> updateExistingVuln(updated))
        .onFailure(ClientWebApplicationException.class).recoverWithItem(error -> {
          var e = (ClientWebApplicationException) error;
          if (e.getResponse() != null && e.getResponse().getStatus() == Response.Status.NOT_FOUND.getStatusCode()) {
            LOGGER.infof("Not found %s in OSV", vulnAlias.alias());
          } else {
            LOGGER.errorf("Error retrieving OSV vulnerability for %s", vulnAlias.alias(), e);
            Uni.createFrom().voidItem()
                .onItem().delayIt().by(Duration.ofSeconds(delay))
                .chain(i -> load(vulnAlias, reload))
                .runSubscriptionOn(executor).subscribeAsCompletionStage();
          }
          return null;
        });
  }

  private Uni<Vulnerability> updateExistingVuln(Vulnerability v) {
    var builder = Vulnerability.builder(v);
    return repository.get(v.cveId()).onItem().transform(existing -> {
      if (existing != null && existing.hasData()) {
        builder.created(existing.created()).lastModified(new Date());
      } else {
        builder.created(new Date());
      }
      return builder.build();
    }).call(repository::save);
  }

  @Override
  public Uni<Void> cleanUp() {
    return Uni.createFrom().voidItem().onItem().invoke(() -> repository.removeAll());
  }

}
