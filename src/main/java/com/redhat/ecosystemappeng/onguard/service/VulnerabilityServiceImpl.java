/*
 * Copyright 2024 Red Hat, Inc. and/or its affiliates
 * and other contributors as indicated by the @author tags.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.redhat.ecosystemappeng.onguard.service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;

import org.eclipse.microprofile.config.inject.ConfigProperty;
import org.eclipse.microprofile.context.ManagedExecutor;
import org.eclipse.microprofile.rest.client.inject.RestClient;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.redhat.ecosystemappeng.onguard.model.osv.OpenSourceVulnerability;
import com.redhat.ecosystemappeng.onguard.model.osv.PackageRef;
import com.redhat.ecosystemappeng.onguard.model.osv.Partition;
import com.redhat.ecosystemappeng.onguard.model.osv.QueryRequest;
import com.redhat.ecosystemappeng.onguard.model.osv.QueryRequestItem;
import com.redhat.ecosystemappeng.onguard.model.osv.QueryResult;
import com.redhat.ecosystemappeng.onguard.model.osv.QueryResultItem;
import com.redhat.ecosystemappeng.onguard.model.osv.VulnerabilityRef;
import com.redhat.ecosystemappeng.onguard.repository.VulnerabilityRepository;
import com.redhat.ecosystemappeng.onguard.service.osv.OsvApi;

import io.smallrye.mutiny.Multi;
import io.smallrye.mutiny.Uni;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;

@ApplicationScoped
public class VulnerabilityServiceImpl implements VulnerabilityService {

  private static final int MAX_OSV_BATCH = 1000;

  @RestClient
  OsvApi osvApi;

  @Inject
  VulnerabilityRepository repository;

  @Inject
  ExecutorService executorService;

  @Inject
  ObjectMapper mapper;

  @ConfigProperty(name = "CircuitBreaker/delay", defaultValue = "30")
  Long delay;

  @Inject
  ManagedExecutor executor;

  @Override
  public Uni<Map<String, OpenSourceVulnerability>> find(List<String> aliases) {
    return repository.list(aliases);
  }

  @Override
  public Uni<Map<String, List<OpenSourceVulnerability>>> findByPurls(List<String> purls) {
    return Multi.createFrom().items(new Partition(purls, MAX_OSV_BATCH).stream())
        .onItem().transform(p -> processBatch(p)).onItem()
        .transformToUniAndMerge(e -> e)
        .toUni()
        .onItem().ifNull().continueWith(Collections.emptyMap());
  }

  private Uni<Map<String, List<OpenSourceVulnerability>>> processBatch(List<String> purls) {
    var keys = Multi.createFrom().items(purls.stream());

    var values = query(purls)
        .onItem()
        .transformToUniAndMerge(vulns -> find(vulns));

    return Multi.createBy().combining().streams(keys, values).asTuple()
        .collect().asMap(t -> t.getItem1(), t -> new ArrayList<>(t.getItem2().values()));
  }

  private Multi<List<String>> query(List<String> purls) {
    List<QueryRequestItem> queries = purls.stream().map(purl -> new QueryRequestItem(new PackageRef(purl))).toList();
    return osvApi.queryBatch(new QueryRequest(queries))
        .onFailure().recoverWithItem(t -> new QueryResult(purls.stream().map(purl -> new QueryResultItem(Collections.emptyList())).toList()))
        .map(QueryResult::results)
        .onItem().ifNull().continueWith(Collections.emptyList())
        .onItem().transformToMulti(i -> Multi.createFrom().items(i.stream()))
        .onItem().transform(item -> {
          if (item.vulns() == null) {
            List<VulnerabilityRef> vulns = Collections.emptyList();
            return vulns;
          }
          return item.vulns();
        }).onItem().transform(refs -> refs.stream().map(VulnerabilityRef::id).toList());
  }

}
