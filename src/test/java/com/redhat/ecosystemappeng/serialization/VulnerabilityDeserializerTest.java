package com.redhat.ecosystemappeng.serialization;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeFormatterBuilder;
import java.util.Date;
import java.util.Scanner;
import java.util.TimeZone;

import org.junit.jupiter.api.Test;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.redhat.ecosystemappeng.model.Vulnerability;

import io.quarkus.test.junit.QuarkusTest;
import jakarta.inject.Inject;

@QuarkusTest
public class VulnerabilityDeserializerTest {

    @Inject
    VulnerabilityDeserializer deserializer;

    @Inject
    ObjectMapper mapper;

    @Test
    void testInjection() {
        assertNotNull(deserializer);
    }

    @Test
    void testParse() throws IOException, ParseException {
        var df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        df.setTimeZone(TimeZone.getTimeZone("UTC"));
        var bytes = Files.readAllBytes(Path.of(getClass().getClassLoader().getResource("nvd-example.json").getPath()));
        Vulnerability v = deserializer.parse(bytes);
        assertEquals("GHSA-3c5c-xrq4-qhr8", v.vulnId());
        assertEquals("CVE-2014-0113", v.cve());

        assertEquals("2022-05-14T00:54:15.000Z", df.format(v.published()));
        assertEquals("2023-11-08T03:57:31.749Z", df.format(v.modified()));

        assertEquals(mapper.readTree(bytes).toPrettyString(), mapper.readTree(v.osvRaw().toJson()).toPrettyString());

        assertNull(v.nvdRaw());
    }
}
