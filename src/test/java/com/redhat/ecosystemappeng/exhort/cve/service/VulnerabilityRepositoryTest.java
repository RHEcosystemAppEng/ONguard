/*
 * Copyright 2024 Red Hat, Inc. and/or its affiliates
 * and other contributors as indicated by the @author tags.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.redhat.ecosystemappeng.exhort.cve.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.List;

import org.junit.jupiter.api.Test;

import io.quarkus.test.junit.QuarkusTest;
import jakarta.inject.Inject;

@QuarkusTest
public class VulnerabilityRepositoryTest {

    @Inject
    VulnerabilityRepository repository;

    @Test
    void testGet_NotFound() {
        var cveId = "not_found_cve";
        var vuln = repository.get(cveId);
        assertNotNull(vuln);
        assertEquals(cveId, vuln.cveId());
        assertNull(vuln.aliases());
    }

    @Test
    void testGet_Found() {
        var cveId = "CVE-2022-24683";
        var vuln = repository.get(cveId);
        assertNotNull(vuln);
        assertEquals(cveId, vuln.cveId());
        assertNotNull(vuln.aliases());
        assertNotNull(vuln.metrics());
    }

    @Test
    void testGetByAlias() {
        var cveId = "CVE-2022-24683";
        var alias = "GHSA-wmrx-57hm-mw7r";
        var vuln = repository.getByAlias(alias);
        assertNotNull(vuln);
        assertEquals(cveId, vuln.cveId());
        assertNotNull(vuln.aliases());
        assertTrue(vuln.aliases().contains(alias));
        assertNotNull(vuln.metrics());
    }

    @Test
    void testList() {
        var cves = List.of("CVE-2022-24683", "not_found", "CVE-2022-30324");
        var found = repository.list(cves);
        assertEquals(cves.size(), found.size());
        for(int i = 0; i < cves.size(); i++) {
            assertNotNull(found.get(i));
            assertEquals(cves.get(i), found.get(i).cveId());
        }
        assertNotNull(found.get(0).metrics());
        assertNotNull(found.get(2).metrics());
        assertNull(found.get(1).metrics());

        assertNotNull(found.get(0).aliases());
        assertNotNull(found.get(2).aliases());
        assertNull(found.get(1).aliases());
    }

        @Test
    void testListByAliases() {
        var aliases = List.of("GHSA-wmrx-57hm-mw7r", "not_found", "GHSA-526x-rm7j-v389");
        var found = repository.listByAliases(aliases);
        assertEquals(3, found.size());
        for(int i = 0; i < aliases.size(); i++) {
            assertNotNull(found.get(i));
            assertTrue(found.get(i).aliases().contains(aliases.get(i)));
        }
        assertNotNull(found.get(0).metrics());
        assertNotNull(found.get(2).metrics());
        assertNull(found.get(1).metrics());

        assertNotNull("CVE-2022-24683", found.get(0).cveId());
        assertEquals("CVE-2022-30324", found.get(2).cveId());
        assertNull(found.get(1).cveId());
    }
}
