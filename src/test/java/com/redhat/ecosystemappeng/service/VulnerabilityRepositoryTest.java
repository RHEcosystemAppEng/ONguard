package com.redhat.ecosystemappeng.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.List;

import org.junit.jupiter.api.Test;

import com.redhat.ecosystemappeng.model.Vulnerability;

import io.quarkus.test.junit.QuarkusTest;
import jakarta.inject.Inject;

@QuarkusTest
public class VulnerabilityRepositoryTest {

    @Inject
    VulnerabilityRepository repository;

    @Test
    void testGet_NotFound() {
        var cveId = "not_found_cve";
        var vuln = repository.get(cveId);
        assertNotNull(vuln);
        assertEquals(cveId, vuln.cveId());
        assertNull(vuln.aliases());
    }

    @Test
    void testGet_Found() {
        var cveId = "CVE-2022-21721";
        var vuln = repository.get(cveId);
        assertNotNull(vuln);
        assertEquals(cveId, vuln.cveId());
        assertNotNull(vuln.aliases());
        assertNotNull(vuln.nvdData());
    }

    @Test
    void testGetByAlias() {
        var cveId = "CVE-2022-21721";
        var alias = "GHSA-23hm-7w47-xw72";
        var vuln = repository.getByAlias(alias);
        assertNotNull(vuln);
        assertEquals(cveId, vuln.cveId());
        assertNotNull(vuln.aliases());
        assertTrue(vuln.aliases().contains(alias));
        assertNotNull(vuln.nvdData());
    }

    @Test
    void testList() {
        var cves = List.of("CVE-2022-21721", "not_found", "CVE-2022-21722");
        var found = repository.list(cves);
        assertEquals(cves.size(), found.size());
        for(int i = 0; i < cves.size(); i++) {
            assertNotNull(found.get(i));
            assertEquals(cves.get(i), found.get(i).cveId());
        }
        assertNotNull(found.get(0).nvdData());
        assertNotNull(found.get(2).nvdData());
        assertNull(found.get(1).nvdData());

        assertNotNull(found.get(0).aliases());
        assertNotNull(found.get(2).aliases());
        assertNull(found.get(1).aliases());
    }

        @Test
    void testListByAliases() {
        var aliases = List.of("GHSA-23hm-7w47-xw72", "not_found", "GHSA-23hm-7w47-xw73");
        var found = repository.listByAliases(aliases);
        assertEquals(3, found.size());
        for(int i = 0; i < aliases.size(); i++) {
            assertNotNull(found.get(i));
            assertTrue(found.get(i).aliases().contains(aliases.get(i)));
        }
        assertNotNull(found.get(0).nvdData());
        assertNotNull(found.get(2).nvdData());
        assertNull(found.get(1).nvdData());

        assertNotNull("CVE-2022-21721", found.get(0).cveId());
        assertEquals("CVE-2022-21722", found.get(2).cveId());
        assertNull(found.get(1).cveId());
    }
}
