/*
 * Copyright 2024 Red Hat, Inc. and/or its affiliates
 * and other contributors as indicated by the @author tags.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.redhat.ecosystemappeng.onguard.repository.redis;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.List;

import org.junit.jupiter.api.Test;

import io.quarkus.test.junit.QuarkusTest;
import io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
import jakarta.inject.Inject;

@QuarkusTest
public class VulnerabilityRedisRepositoryTest {

  @Inject
  VulnerabilityRedisRepository repository;

  @Test
  void testGet_NotFound() {
    var cveId = "CVE-0000-00000";
    var vuln = repository.get(cveId).subscribe().withSubscriber(UniAssertSubscriber.create()).awaitItem()
        .assertCompleted().getItem();

    assertNotNull(vuln);
    assertEquals(cveId, vuln.getId());
  }

  @Test
  void testGet_Found() {
    var aliasId = "GHSA-9p26-698r-w4hx";
    var cveId = "CVE-2024-23650";
    var vuln = repository.get(aliasId).subscribe().withSubscriber(UniAssertSubscriber.create()).awaitItem()
        .assertCompleted().getItem();

    assertNotNull(vuln);
    assertEquals(cveId, vuln.getId());
    assertTrue(vuln.getAliases().contains(aliasId));
    assertNotNull(vuln.getSeverity());
  }

  @Test
  void testGetByAlias() {
    var cveId = "CVE-2022-31026";
    var alias = "GHSA-5g4r-2qhx-vqfm";
    var vuln = repository.get(cveId).subscribe().withSubscriber(UniAssertSubscriber.create()).awaitItem()
        .assertCompleted().getItem();

    assertNotNull(vuln);
    assertTrue(vuln.getAliases().contains(alias));
    assertEquals(cveId, vuln.getId());
    assertNotNull(vuln.getSeverity());
  }

  @Test
  void testGetByAlias_NotFound() {
    var aliasId = "not_found_alias";
    var vuln = repository.get(aliasId).subscribe().withSubscriber(UniAssertSubscriber.create())
        .awaitItem().assertCompleted().getItem();

    assertNotNull(vuln);
    assertNull(vuln.getId());
  }

  @Test
  void testListByAliases() {
    // CVE-2024-23650 and GHSA-9p26-698r-w4hx are aliases of the same CVE
    var aliases = List.of("GHSA-9p26-698r-w4hx", "CVE-0000-00000", "CVE-2022-31026", "CVE-2024-23650");
    var found = repository.list(aliases).subscribe().withSubscriber(UniAssertSubscriber.create()).awaitItem()
    .assertCompleted().getItem();
    assertEquals(3, found.size());
    for (int i = 1; i < 4; i++) {
      assertNotNull(found.get(aliases.get(i)));
    }

    var cveWithAlias = found.get(aliases.get(3));
    assertNotNull(cveWithAlias.getSeverity());
    assertEquals(cveWithAlias.getId(), aliases.get(3));
    assertTrue(cveWithAlias.getAliases().contains(aliases.get(0)));

    var cve = found.get(aliases.get(2));
    assertNotNull(cve.getSeverity());
    assertEquals(cve.getId(), aliases.get(2));
    assertFalse(cve.getAliases().isEmpty());

    var notFound = found.get(aliases.get(1));
    assertTrue(notFound.getSeverity().isEmpty());
    assertEquals(notFound.getId(), aliases.get(1));
    assertTrue(notFound.getAliases().isEmpty());
  }
}
