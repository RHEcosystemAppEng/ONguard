/*
 * Copyright 2024 Red Hat, Inc. and/or its affiliates
 * and other contributors as indicated by the @author tags.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.redhat.ecosystemappeng.onguard.repository.redis;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;

import java.util.List;

import org.junit.jupiter.api.Test;

import io.quarkus.test.junit.QuarkusTest;
import io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
import jakarta.inject.Inject;

@QuarkusTest
public class VulnerabilityRedisRepositoryTest {

  @Inject
  VulnerabilityRedisRepository repository;

  @Test
  void testGet_NotFound() {
    var cveId = "not_found_cve";
    var vuln = repository.get(cveId).subscribe().withSubscriber(UniAssertSubscriber.create()).awaitItem()
        .assertCompleted().getItem();

    assertNotNull(vuln);
    assertEquals(cveId, vuln.cveId());
  }

  @Test
  void testGet_Found() {
    var cveId = "CVE-2022-24683";
    var vuln = repository.get(cveId).subscribe().withSubscriber(UniAssertSubscriber.create()).awaitItem()
        .assertCompleted().getItem();

    assertNotNull(vuln);
    assertEquals(cveId, vuln.cveId());
    assertNotNull(vuln.severities());
  }

  @Test
  void testGetByAlias() {
    var cveId = "CVE-2022-24683";
    var alias = "GHSA-wmrx-57hm-mw7r";
    var vuln = repository.getByAlias(alias).subscribe().withSubscriber(UniAssertSubscriber.create()).awaitItem()
        .assertCompleted().getItem();

    assertNotNull(vuln);
    assertNotNull(vuln.alias());
    assertNotNull(vuln.vulnerability());
    assertEquals(cveId, vuln.vulnerability().cveId());
    assertEquals(alias, vuln.alias());
    assertNotNull(vuln.vulnerability().severities());
  }

  @Test
  void testGetByAlias_NotFound() {
    var aliasId = "not_found_alias";
    var alias = repository.getByAlias(aliasId).subscribe().withSubscriber(UniAssertSubscriber.create())
        .awaitItem().assertCompleted().getItem();

    assertNotNull(alias);
    assertEquals(aliasId, alias.alias());
    assertNull(alias.vulnerability());
  }

  @Test
  void testListByAliases() {
    // CVE-2022-30324 and GHSA-526x-rm7j-v389 are aliases of the same CVE
    var aliases = List.of("GHSA-wmrx-57hm-mw7r", "not_found", "GHSA-526x-rm7j-v389", "CVE-2022-30324");
    var found = repository.listByAliases(aliases).subscribe().withSubscriber(UniAssertSubscriber.create()).awaitItem()
        .assertCompleted().getItem();
    assertEquals(3, found.size());
    for (int i = 0; i < 3; i++) {
      assertNotNull(found.get(i));
    }
    assertNotNull(found.get(0).vulnerability().severities());
    assertNotNull(found.get(2).vulnerability().severities());
    assertNull(found.get(1).vulnerability());

    assertNotNull("CVE-2022-24683", found.get(0).vulnerability().cveId());
    assertEquals("CVE-2022-30324", found.get(2).vulnerability().cveId());
    assertNull(found.get(1).vulnerability());
  }
}
